apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o k8s-deploy.yaml
      kompose.version: 1.17.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: benthos
    name: benthos
  spec:
    ports:
    - name: "4195"
      port: 4195
      targetPort: 4195
    selector:
      io.kompose.service: benthos
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o k8s-deploy.yaml
      kompose.version: 1.17.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: frontend
    name: frontend
  spec:
    ports:
    - name: "8080"
      port: 8080
      targetPort: 8080
    selector:
      io.kompose.service: frontend
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o k8s-deploy.yaml
      kompose.version: 1.17.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: graphite
    name: graphite
  spec:
    ports:
    - name: "80"
      port: 80
      targetPort: 80
    - name: "2003"
      port: 2003
      targetPort: 2003
    selector:
      io.kompose.service: graphite
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o k8s-deploy.yaml
      kompose.version: 1.17.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: kafka
    name: kafka
  spec:
    ports:
    - name: "9092"
      port: 9092
      targetPort: 9092
    selector:
      io.kompose.service: kafka
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o k8s-deploy.yaml
      kompose.version: 1.17.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: management
    name: management
  spec:
    ports:
    - name: "8090"
      port: 8090
      targetPort: 8090
    selector:
      io.kompose.service: management
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kompose.cmd: kompose convert -o k8s-deploy.yaml
      kompose.version: 1.17.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: zk
    name: zk
  spec:
    ports:
    - name: "2181"
      port: 2181
      targetPort: 2181
    selector:
      io.kompose.service: zk
  status:
    loadBalancer: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o k8s-deploy.yaml
      kompose.version: 1.17.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: benthos
    name: benthos
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: benthos
      spec:
        containers:
        - image: jeffail/benthos
          name: benthos
          ports:
          - containerPort: 4195
          resources: {}
          volumeMounts:
          - mountPath: /benthos.yaml
            name: benthos-claim0
        restartPolicy: Always
        volumes:
        - name: benthos-claim0
          persistentVolumeClaim:
            claimName: benthos-claim0
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: benthos-claim0
    name: benthos-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o k8s-deploy.yaml
      kompose.version: 1.17.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: consumers
    name: consumers
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: consumers
      spec:
        containers:
        - image: allegro/hermes-consumers
          name: consumers
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o k8s-deploy.yaml
      kompose.version: 1.17.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: frontend
    name: frontend
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: frontend
      spec:
        containers:
        - image: allegro/hermes-frontend
          name: frontend
          ports:
          - containerPort: 8080
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o k8s-deploy.yaml
      kompose.version: 1.17.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: graphite
    name: graphite
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: graphite
      spec:
        containers:
        - image: nickstenning/graphite
          name: graphite
          ports:
          - containerPort: 80
          - containerPort: 2003
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o k8s-deploy.yaml
      kompose.version: 1.17.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: kafka
    name: kafka
  spec:
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: kafka
      spec:
        containers:
        - env:
          - name: KAFKA_ADVERTISED_HOST_NAME
            value: kafka
          - name: KAFKA_ADVERTISED_PORT
            value: "9092"
          - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
            value: "false"
          - name: KAFKA_BROKER_ID
            value: "0"
          - name: KAFKA_DELETE_TOPIC_ENABLE
            value: "true"
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: zk:2181
          image: wurstmeister/kafka:1.1.0
          name: kafka
          ports:
          - containerPort: 9092
          resources: {}
          volumeMounts:
          - mountPath: /var/run/docker.sock
            name: kafka-claim0
        restartPolicy: Always
        volumes:
        - name: kafka-claim0
          persistentVolumeClaim:
            claimName: kafka-claim0
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    creationTimestamp: null
    labels:
      io.kompose.service: kafka-claim0
    name: kafka-claim0
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o k8s-deploy.yaml
      kompose.version: 1.17.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: management
    name: management
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: management
      spec:
        containers:
        - image: allegro/hermes-management
          name: management
          ports:
          - containerPort: 8090
          resources: {}
        restartPolicy: Always
  status: {}
- apiVersion: extensions/v1beta1
  kind: Deployment
  metadata:
    annotations:
      kompose.cmd: kompose convert -o k8s-deploy.yaml
      kompose.version: 1.17.0 ()
    creationTimestamp: null
    labels:
      io.kompose.service: zk
    name: zk
  spec:
    replicas: 1
    strategy: {}
    template:
      metadata:
        creationTimestamp: null
        labels:
          io.kompose.service: zk
      spec:
        containers:
        - image: wurstmeister/zookeeper:3.4.6
          name: zk
          ports:
          - containerPort: 2181
          resources: {}
        restartPolicy: Always
  status: {}
kind: List
metadata: {}

